

void Main()
{
	try
	{
		#region driver
		//Testing

		//NAME: SANIDHYA
		//SECTION: A01


		//1. Selecting all Open Purchase Orders to Receive	
         GetOutStandingPurchaseOrders().Dump("Outstanding Purchase Order's");
		//2/ Employee Selecting Purchase Order to receive 
		 var selectedPID = 350;
		//3. Details for selected PO or pulled from database 
		 GetRecieveOrder(selectedPID).Dump();
		//4. Receiver Entering Received Quantity, QtyReturned and Reason
		//Create Temporary cart to store items
		ReceiveOrderView receivedOrder = GetRecieveOrder(selectedPID);
		//receivedOrder.Dump();
		//receivedOrder.POItemDetails[2].QtyReceived = 1;
		//receivedOrder.POItemDetails[0].QtyReceived = 5;
		//receivedOrder.POItemDetails[1].QtyReturned = 7;
		//receivedOrder.POItemDetails[1].Reason = "Not-Working";

		
	    List<UnorderedReturnItemView> unOrderedItemCart = new List<UnorderedReturnItemView>();
		UnorderedReturnItemView unOrderedItem = new UnorderedReturnItemView();
		unOrderedItem.Description = "Smart TV's";
		unOrderedItem.VendorPartNumber = "407-803-1";
		unOrderedItem.Qty = 4;
		
		
		unOrderedItemCart.Add(unOrderedItem);
		receivedOrder.UnorderedItems = unOrderedItemCart;
		
		
        receivedOrder.Dump();		
		//Force CLose Table
		//ForceCloseOrder("Vendor Cancelled", receivedOrder);
	
	}
	catch (AggregateException ex)
	{
		foreach (var error in ex.InnerExceptions)
		{
			error.Message.Dump();
		}
	}
#endregion
	catch (ArgumentNullException ex)
	{
		GetInnerException(ex).Message.Dump();
	}
	catch (Exception ex)
	{
		GetInnerException(ex).Message.Dump();
	}
}

private Exception GetInnerException(Exception ex)
{
	while (ex.InnerException != null)
		ex = ex.InnerException;
	return ex;
}

public List<OutstandingOrderView> GetOutStandingPurchaseOrders()
{
	return PurchaseOrders
	.Where(x => x.Closed == false)
	.Where(x => x.OrderDate != null)
	.Select(x => new OutstandingOrderView
	{
		PurchaseOrderID = x.PurchaseOrderID,
		OrderDate = x.OrderDate,
		VendorName = x.Vendor.VendorName,
		VendorPhone = x.Vendor.Phone
	}).ToList();
}

public ReceiveOrderView GetRecieveOrder(int OID)
{
	return PurchaseOrders
	    .Where(x => x.PurchaseOrderID == OID)
	    .Select(x => new ReceiveOrderView
	{
		PurchaseOrderID = x.PurchaseOrderID,
		OrderDate = x.OrderDate,
		Vendor = Vendors
		              .Where(y => x.VendorID == y.VendorID)
					  .Select(y => new  VendorView
					  {
					    VendorName = y.VendorName,
						Address = y.Address,
						City = y.City,
						PostalCode = y.PostalCode,
						Province = y.ProvinceID,
						VendorPhone = y.Phone
					  }).FirstOrDefault(),
		POItemDetails = PurchaseOrderDetails
					  .Where(x => x.PurchaseOrderID == OID)
					  .Select(x => new ItemView
					  {
					    StockItemID = x.StockItem.StockItemID,
						StockItemDescription = x.StockItem.Description,
						QtyOnOrder = x.Quantity,
						QtyOutstanding = x.ReceiveOrderDetails.Count() == 0 ? x.Quantity : x.Quantity - x.ReceiveOrderDetails.Sum(y => y.QuantityReceived),
				       
				
					  }).ToList()
	}).FirstOrDefault();
}


public ReceiveOrderView ProcessReceiveOrder(ReceiveOrderView orderView)
{
	#region Variables
	ReceiveOrders receivedOrders = ReceiveOrders  .Where(x => x.PurchaseOrderID == orderView.PurchaseOrderID)
									.FirstOrDefault();
    List<PurchaseOrderDetails> SystemOrder = PurchaseOrderDetails .Where(x => x.PurchaseOrderID == orderView.PurchaseOrderID)
	.ToList();
	
	PurchaseOrders originalPO = PurchaseOrders .Where(x => x.PurchaseOrderID == orderView.PurchaseOrderID)
									.FirstOrDefault();
	#endregion

	#region checkingErrors

	List<Exception> errorList = new List<Exception>();

	//Receiving Order is supplied
	if (orderView == null)
	{
		throw new ArgumentNullException("Order's Must be supplied");
	}
	if (orderView.POItemDetails.Count() == 0)
	{
		errorList.Add(new Exception("No items provided for the order"));
	}
	else
	{
		foreach (var item in orderView.POItemDetails)
		{
			if (item.QtyReceived < 0 || item.QtyReceived > item.QtyOutstanding)
			{
				errorList.Add(new Exception("Quantity to receive must be a positive integer no greater than the outstanding amount"));
			}
			if (item.QtyReturned < 0 || item.QtyReturned > item.QtyOutstanding)
			{
				errorList.Add(new Exception("Quantity to return must be a positive integer no greater than the outstanding amount"));
			}
			if (String.IsNullOrWhiteSpace(item.Reason) && item.QtyReturned > 0)
			{
				errorList.Add(new Exception("Reason Must be Provided for return"));
			}
		}
	}
	#endregion

	#region Processing
	//Update OutstandingQty , QuantityOnHand
	foreach (var item in orderView.POItemDetails)
	{
		SystemOrder.Where(s => s.StockItemID == item.StockItemID).FirstOrDefault().Quantity -= item.QtyReceived;
		StockItems SystemItem = StockItems .Where(si => si.StockItemID == item.StockItemID).FirstOrDefault();
		SystemItem.QuantityOnHand += item.QtyReceived;
		SystemItem.QuantityOnOrder -= item.QtyReceived;


		//Create ReturnOrderDetail for returned Items
		if (item.QtyReturned > 0)
		{
			ReturnedOrderDetailView returnedItem = new ReturnedOrderDetailView();
			returnedItem.PurchaseOrderDetailID = item.PurchaseOrderDetailID;
			returnedItem.UnOrderedItemID = item.StockItemID;
			returnedItem.Quantity = item.QtyReturned;
			returnedItem.Reason = item.Reason;
			returnedItem.VendorPartNumber = SystemItem.VendorStockNumber;
		}

	    //Create UnReturnOrderDetail for Unordered Items
		foreach (var unOrderedItem in orderView.UnorderedItems)
		{
			ReturnedOrderDetails NUnorderedItem = new ReturnedOrderDetails();
			NUnorderedItem.ItemDescription = unOrderedItem.Description;
			NUnorderedItem.Quantity = unOrderedItem.Qty;
			NUnorderedItem.VendorStockNumber = unOrderedItem.VendorPartNumber;
			NUnorderedItem.Reason = "Not-ordered";
		}
	}

	#endregion

	//Updating status if PO is able to be closed
	if (errorList.Count > 0)
	{
		throw new AggregateException(errorList);
	}
	
	if (SystemOrder.Sum(o => o.Quantity) == 0)
	{
		orderView.CanBeClosed = true;
		originalPO.Closed = true;
	}

	return GetRecieveOrder(orderView.PurchaseOrderID);
}

public void ForceCloseOrder(string reason, ReceiveOrderView receiving)
{
	#region Local Variables
	PurchaseOrders purchaseOrder = PurchaseOrders .Where(x=> x.PurchaseOrderID == receiving.PurchaseOrderID) .FirstOrDefault();
	List<PurchaseOrderDetails> purchaseOrderDetail = PurchaseOrderDetails .Where(x => x.PurchaseOrderID == receiving.PurchaseOrderID) .ToList();
	List<Exception> errorList = new List<Exception>();
	#endregion

	#region Error Checking
	if (purchaseOrder == null)
	{
		errorList.Add(new Exception("Purchase Order doesn't exist"));
	}
	if (String.IsNullOrWhiteSpace(reason))
	{
		errorList.Add(new Exception("Must provide a reason for Force Close"));

	}
	#endregion

	#region Processing
	receiving.Dump("Before");
	
	
	//Updating PO to be close
	purchaseOrder.Closed = true;
	purchaseOrder.Notes = reason;

	//Updating PurchaseOrderDetails, StockItems
	foreach (var item in receiving.POItemDetails)
	{
		purchaseOrderDetail.Where(y => y.StockItemID == item.StockItemID).FirstOrDefault().Quantity -= item.QtyOnOrder;
		StockItems systemItem = StockItems .Where(y => y.StockItemID == item.StockItemID).FirstOrDefault();
		systemItem.QuantityOnOrder -= item.QtyReceived;
	}
	#endregion

	StockItems.Where(si => si.StockItemID == 45).Dump();
	purchaseOrder.Dump("After");
	#region Save Changes
	if (errorList.Count() > 0)
	{
		throw new AggregateException(errorList);
	}	
	#endregion
}

public List<UnorderedReturnItemView> GetUnorderedItems()
{
	return null;
}

#region ViewModels

public class UnorderedReturnItemView
{
	public int? PurchaseOrderID { get; set; }
	public int ItemID { get; set; }
	public string Description { get; set; }
	public string VendorPartNumber { get; set; }
	public int Qty { get; set; }
	public bool RemoveFromViewFlag { get; set; }
}

public class ReturnedOrderDetailView
{
	public int ReturnedOrderDetailID { get; set; }
	public int ReceiveOrderID { get; set; }
	public int PurchaseOrderDetailID { get; set; }
	public int UnOrderedItemID { get; set; }
	public string ItemDescription { get; set; }
	public int Quantity { get; set; }
	public string Reason { get; set; }
	public string VendorPartNumber { get; set; }
	public bool RemoveFromViewFlag { get; set; }
}

public class ItemView
{
	public int PurchaseOrderDetailID { get; set; }
	public int StockItemID { get; set; }
	public string StockItemDescription { get; set; }
	public int QtyOnOrder { get; set; }
	public int QtyOutstanding { get; set; }
	public int QtyReceived { get; set; }
	public int QtyReturned { get; set; }
	public string Reason { get; set; }
}

public class VendorView
{
	public string VendorName { get; set; }
	public string Address { get; set; }
	public string City { get; set; }
	public string Province { get; set; }
	public string PostalCode { get; set; }
	public string VendorPhone { get; set; }
}


public class ReceiveOrderView
{
	public int PurchaseOrderID { get; set; }
	public DateTime? OrderDate { get; set; }
	public bool CanBeClosed { get; set; }
	public VendorView Vendor { get; set; }
	public List<ItemView> POItemDetails { get; set; }
	public List<UnorderedReturnItemView> UnorderedItems { get; set; }
}

public class OutstandingOrderView
{
	public int PurchaseOrderID { get; set; }
	public DateTime? OrderDate { get; set; }
	public string VendorName { get; set; }
	public string VendorPhone { get; set; }
}

#endregion
// You can define other methods, fields, classes and namespaces here